import { assert, assertEquals, assertFalse } from "jsr:@std/assert";
import {
	get_box,
	is_board_solved,
	new_board,
	print_board,
	set_box,
} from "./board.ts";
import type { Box } from "./board.ts";

const solved_board: Array<Box> = [
	7,
	5,
	3,
	6,
	2,
	1,
	8,
	9,
	4,
	2,
	9,
	4,
	3,
	8,
	7,
	6,
	1,
	5,
	1,
	6,
	8,
	4,
	9,
	5,
	7,
	2,
	3,
	4,
	3,
	2,
	5,
	1,
	8,
	9,
	6,
	7,
	8,
	7,
	5,
	2,
	6,
	9,
	3,
	4,
	1,
	9,
	1,
	6,
	7,
	3,
	4,
	5,
	8,
	2,
	3,
	4,
	1,
	9,
	5,
	6,
	2,
	7,
	8,
	6,
	2,
	7,
	8,
	4,
	3,
	1,
	5,
	9,
	5,
	8,
	9,
	1,
	7,
	2,
	4,
	3,
	6,
];

Deno.test("can properly get and set board", () => {
	const board = set_box(new_board(), 0, 5, 7);
	assertEquals(get_box(board, 5, 0), 0);
	assertEquals(get_box(board, 0, 0), 0);
	assertEquals(get_box(board, 0, 5), 7);
});

Deno.test("check board solved", () => {
	const solved_board: Array<Box> = [
		7,
		5,
		3,
		6,
		2,
		1,
		8,
		9,
		4,
		2,
		9,
		4,
		3,
		8,
		7,
		6,
		1,
		5,
		1,
		6,
		8,
		4,
		9,
		5,
		7,
		2,
		3,
		4,
		3,
		2,
		5,
		1,
		8,
		9,
		6,
		7,
		8,
		7,
		5,
		2,
		6,
		9,
		3,
		4,
		1,
		9,
		1,
		6,
		7,
		3,
		4,
		5,
		8,
		2,
		3,
		4,
		1,
		9,
		5,
		6,
		2,
		7,
		8,
		6,
		2,
		7,
		8,
		4,
		3,
		1,
		5,
		9,
		5,
		8,
		9,
		1,
		7,
		2,
		4,
		3,
		6,
	];
	assert(is_board_solved(solved_board));
	let wrong_row = set_box(solved_board, 0, 0, 4);
	wrong_row = set_box(wrong_row, 0, 8, 7);
	assertFalse(is_board_solved(wrong_row));
	print_board(solved_board);
	print_board(wrong_row);
});
